name: Compile, Test and Release

on: [pull_request]

jobs:
  build:
    name:     ${{ matrix.config.name }}
    runs-on:  ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
          name:       "Linux Debug and Test",
          os:         ubuntu-latest,
          qt-host:    'linux',
          qt-target:  'desktop',
          config:     debug
        }
        - {
          name:       "OSX Installer",
          os:         macos-latest,
          qt-host:    'mac',
          qt-target:  'desktop',
          config:     installer
        }

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      '5.12.6'
          host:         ${{ matrix.config.qt-host }}
          target:       ${{ matrix.config.qt-target }}
          dir:          '${{ runner.temp }}'
          modules:      'qtcharts'
          setup-python: 'false'

      - name: Install QGC source dependencies for linux
        if:   ${{ matrix.config.os }} == 'ubuntu-latest'
        run:  sudo apt-get install -y libsdl2-dev

      - name: Install ccache OSX
        if:   '${{ matrix.config.os }} == 'macos-latest'
        run:  brew install ccache

      - name: Install ccache Linux
        if:   '${{ matrix.config.os }} == 'ubuntu-latest'
        run:  sudo apt-get install ccache

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{matrix.config}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
          restore-keys: ${{matrix.config}}-ccache-

      - name: Setup ccache
        run: |
            mkdir -p ~/.ccache
            echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
            echo "compression = true" >> ~/.ccache/ccache.conf
            echo "compression_level = 5" >> ~/.ccache/ccache.conf
            echo "max_size = 100M" >> ~/.ccache/ccache.conf
            ccache -s
            ccache -z

      - name: Create build directory
        run:  mkdir ${{ runner.temp }}/shadow_build_dir

      - name: Build
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run:  |
              qmake -r ${ACTIONS_BUILD_DIR}/qgroundcontrol.pro CONFIG+=${{ matrix.config.config }}
              make -j2

      - name: ccache post-run
        run:  ccache -s

      - name: Setup for unit tests
        if: '${{ matrix.config.os }} == 'ubuntu-latest'
        working-directory: ${{ runner.temp }}/shadow_build_dir  
        run:  |
              mkdir -p ~/.config/QtProject/
              cp ${ACTIONS_BUILD_DIR}/test/qtlogging.ini ~/.config/QtProject/
              export QT_FATAL_WARNINGS=1

      - name: Run unit tests
        if: '${{ matrix.config.os }} == 'ubuntu-latest'
        uses: GabrielBB/xvfb-action@v1
        with:
          working-directory:  ${{ runner.temp }}/shadow_build_dir  
          run:                ./staging/qgroundcontrol-start.sh --unittest
