/****************************************************************************
 *
 *   Copyright (c) 2012-2014 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/beat/px4/src/Firmware/msg/sensor_gps_position.msg */


#pragma once
#include <stdint.h>

/*
 * This file is auto-generated from https://github.com/PX4/Firmware/blob/master/msg/sensor_gps_position.msg
 * and was manually copied here.
 */

struct sensor_gps_s {
    // GPS position in WGS84 coordinates.
    // the field 'timestamp' is for the position & velocity (microseconds)
    uint64_t timestamp;                 // time since system start (microseconds)

    uint32_t device_id;                 // unique device ID for the sensor that does not change between power cycles

    int32_t lat;                        // Latitude in 1E-7 degrees
    int32_t lon;                        // Longitude in 1E-7 degrees
    int32_t alt;                        // Altitude in 1E-3 meters above MSL, (millimetres)
    int32_t alt_ellipsoid;              // Altitude in 1E-3 meters bove Ellipsoid, (millimetres)

    float s_variance_m_s;               // GPS speed accuracy estimate, (metres/sec)
    float c_variance_rad;               // GPS course accuracy estimate, (radians)
    uint8_t fix_type;                   // 0-1: no fix, 2: 2D fix, 3: 3D fix, 4: RTCM code differential, 5: Real-Time Kinematic, float, 6: Real-Time Kinematic, fixed, 8: Extrapolated. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.

    float eph;                          // GPS horizontal position accuracy (metres)
    float epv;                          // GPS vertical position accuracy (metres)

    float hdop;                         // Horizontal dilution of precision
    float vdop;                         // Vertical dilution of precision

    int32_t noise_per_ms;               // GPS noise per millisecond
    uint16_t automatic_gain_control;    // Automatic gain control monitor
    int32_t jamming_indicator;          // indicates jamming is occurring
    uint8_t jamming_state;              // indicates whether jamming has been detected or suspected by the receivers. O: Unknown, 1: OK, 2: Warning, 3: Critical

    float vel_m_s;                      // GPS ground speed, (metres/sec)
    float vel_n_m_s;                    // GPS North velocity, (metres/sec)
    float vel_e_m_s;                    // GPS East velocity, (metres/sec)
    float vel_d_m_s;                    // GPS Down velocity, (metres/sec)
    float cog_rad;                      // Course over ground (NOT heading, but direction of movement), -PI..PI, (radians)
    bool vel_ned_valid;                 // True if NED velocity is valid

    int32_t timestamp_time_relative;    // timestamp + timestamp_time_relative = Time of the UTC timestamp since system start, (microseconds)
    uint64_t time_utc_usec;             // Timestamp (microseconds, UTC), this is the timestamp which comes from the gps module. It might be unavailable right after cold start, indicated by a value of 0

    uint8_t satellites_used;            // Number of satellites used

    float heading;                      // heading angle of XYZ body frame rel to NED. Set to NaN if not available and updated (used for dual antenna GPS), (rad, [-PI, PI])
    float heading_offset;               // heading offset of dual antenna array in body frame. Set to NaN if not applicable. (rad, [-PI, PI])
    float heading_accuracy;             // heading accuracy (rad, [0, 2PI])
};
